<?php

/**
 * @file
 * Allows operations to be performed on items selected in a view.
 */

// Types of bulk execution.
define('VBO_EXECUTION_DIRECT',    1);
define('VBO_EXECUTION_BATCH',     2);
define('VBO_EXECUTION_QUEUE',     3);

// Types of aggregate actions.
define('VBO_AGGREGATE_FORCED',    1);
define('VBO_AGGREGATE_FORBIDDEN', 0);
define('VBO_AGGREGATE_OPTIONAL',  2);

// Access operations.
define('VBO_ACCESS_OP_VIEW',      0x01);
define('VBO_ACCESS_OP_UPDATE',    0x02);
define('VBO_ACCESS_OP_CREATE',    0x04);
define('VBO_ACCESS_OP_DELETE',    0x08);

/**
 * Implementation of hook_views_api().
 */
function views_bulk_operations_views_api() {
  return array(
    'api' => 3,
  );
}

/**
 * Implementation of hook_theme().
 */
function views_bulk_operations_theme() {
  $themes = array(
    'views_bulk_operations_confirmation' => array(
      'variables' => array('objects' => NULL, 'view' => NULL),
    ),
  );
  $files = file_scan_directory(drupal_get_path('module', 'views_bulk_operations'), '/\.action\.inc$/');
  if ($files) foreach ($files as $file) {
    $action_theme_fn = 'views_bulk_operations_'. str_replace('.', '_', basename($file->filename, '.inc')).'_theme';
    if (function_exists($action_theme_fn)) {
      $themes += call_user_func($action_theme_fn);
    }
  }
  return $themes;
}

/**
 * Implementation of hook_init().
 */
function views_bulk_operations_init() {
  // Reset selection if we're not in the view anymore.
  if (isset($_SESSION) && !isset($_SESSION['vbo_values'][$_GET['q']])) {
    unset($_SESSION['vbo_values']);
  }

  // Automatically include the action files.
  $files = file_scan_directory(drupal_get_path('module', 'views_bulk_operations'), '/\.action\.inc$/');
  if ($files) {
    foreach ($files as $file) {
      require_once($file->filename);
    }
  }
}

/**
 * Gets the VBO field if it exists on the passed-in view.
 *
 * @return
 *  The field object if found. Otherwise, FALSE.
 */
function _views_bulk_operations_get_field($view) {
  foreach ($view->field as $field_name => $field) {
    if (is_a($field, 'views_bulk_operations_handler_field_operations')) {
      // Add in the view object for convenience.
      $field->view = $view;
      return $field;
    }
  }
  return FALSE;
}

/**
 * Implements hook_form_alter().
 */
function views_bulk_operations_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form_state['step']) && isset($form['view'])) {
    $vbo = _views_bulk_operations_get_field($form['view']['#value']);
  }
  // Not a VBO-enabled views form.
  if (empty($vbo)) {
    return;
  }

  // Add basic VBO functionality.
  if ($form_state['step'] == 'views_form_views_form') {
    $form = views_bulk_operations_form($form, $form_state, $vbo);
  }

  // Usability improvement to standard "Send e-mail" action.
  if (isset($form['operation']) && ($form['operation']['#value']['callback'] == 'system_send_email_action' || $form['operation']['#value'] == 'system_send_email_action')) {
    // Hide recipient field, as we have already chosen it from user list.
    $form['recipient']['#default_value'] = '%author';
    $form['recipient']['#type'] = 'hidden';
  }
}

/**
 * Extend the views_form multistep form with elements for executing an operation.
 */
function views_bulk_operations_form($form, &$form_state, $vbo) {
  //$form['#attached']['js'][] = drupal_get_path('module', 'views_bulk_operations') . '/views_bulk_operations.js';
  //$form['#attached']['css'][] = drupal_get_path('module', 'views_bulk_operations') . '/views_bulk_operations.css';

  // Force browser to reload the page if Back is hit.
  if (preg_match('/msie/i', $_SERVER['HTTP_USER_AGENT'])) {
    drupal_add_http_header('Cache-Control', 'no-cache'); // works for IE6+
  }
  else {
    drupal_add_http_header('Cache-Control', 'no-store'); // works for Firefox and other browsers
  }

  // If there's a session variable on this view, pre-load the old operation value.
  if (isset($_SESSION['vbo_values'][$_GET['q']])) {
    $default_operation = $_SESSION['vbo_values'][$_GET['q']]['operation'];
    $select_all =  $_SESSION['vbo_values'][$_GET['q']]['objects']['select_all'];
  }
  else {
    $default_operation = NULL;
    $select_all = FALSE;
  }

  // Set by JS to indicate that all objects
  // on all pages are selected.
  $form['select_all'] = array(
    '#type' => 'hidden',
    '#value' => $select_all,
  );

  if (count($vbo->get_selected_operations()) == 1 && $vbo->options['merge_single_action']) {
    $form['single_operation'] = array(
      '#type' => 'value',
      '#value' => TRUE,
    );

    $ops = array_keys($vbo->get_selected_operations());
    $operation = $vbo->get_operation_info($ops[0]);
    $form['operation'] = array('#type' => 'value', '#value' => $ops[0]);
    if ($operation['configurable']) {
      $dummy_selection = array();
      foreach ($vbo->view->result as $result) {
        $dummy_selection[$result->{$vbo->view->base_field}] = $result;
      }
      $form += _views_bulk_operations_action_form($operation, $vbo->view, $dummy_selection, $vbo->get_operation_settings($operation));
    }
    $form['actions']['submit'] = array(
      '#type' => 'submit',
      '#value' => $operation['label'],
    );
  }
  else {
    $form['single_operation'] = array(
      '#type' => 'value',
      '#value' => FALSE,
    );

    unset($form['actions']['submit']);
    $form['select'] = array(
      '#type' => 'fieldset',
      '#title' => t('Operations'),
      '#collapsible' => TRUE,
    );
    if ($vbo->options['vbo']['display_type'] == 0) {
      // Create dropdown and submit button.
      $form['select']['operation'] = array(
        '#type' => 'select',
        '#options' => array(0 => t('- Choose an operation -')) + $vbo->get_selected_operations(),
        '#default_value' => $default_operation,
      );
      $form['select']['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Execute'),
      );
    }
    else {
      // Create buttons for actions.
      foreach ($vbo->get_selected_operations() as $md5 => $description) {
        $form['select'][$md5] = array(
          '#type' => 'submit',
          '#value' => $description,
          '#hash' => $md5,
        );
      }
    }
  }

  return $form;
}

/**
 * Multistep form callback for the "configure" step.
 */
function views_bulk_operations_config_form($form, $form_state, $view, $output) {
  $vbo = _views_bulk_operations_get_field($view);
  $operation = $vbo->get_operation_info($form_state['views_bulk_operations']['views_form_views_form']['operation']);
  $form['operation'] = array('#type' => 'value', '#value' => $operation);
  $form += _views_bulk_operations_action_form(
    $operation,
    $vbo->view,
    $form_state['views_bulk_operations']['views_form_views_form']['selection'],
    $vbo->get_operation_settings($operation)
  );
  $form['execute'] = array(
    '#type' => 'submit',
    '#value' => t('Next'),
    '#weight' => 98,
  );
  $query = $vbo->view->get_exposed_input();
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => t('<a href="@view">Cancel</a>', array('@view' => url($_GET['q'], array('query' => $query)))),
    '#weight' => 99,
  );
  drupal_set_title(t('Set parameters for %action', array('%action' => $operation['label'])), PASS_THROUGH);

  return $form;
}

/**
 * Multistep form callback for the "confirm" step.
 */
function views_bulk_operations_confirm_form($form, $form_state, $view, $output) {
  $vbo = _views_bulk_operations_get_field($view);
  $operation = $vbo->get_operation_info($form_state['views_bulk_operations']['views_form_views_form']['operation']);
  $objects = $form_state['views_bulk_operations']['views_form_views_form']['selection'];
  $form = confirm_form($form,
    t('Are you sure you want to perform %action on selected rows?', array('%action' => $operation['label'])),
    array('path' => $_GET['q'], 'query' => $view->get_exposed_input()),
    theme('views_bulk_operations_confirmation', array('objects' => $objects, 'view' => $vbo->view))
  );

  return $form;
}

/**
 * Goes through the submitted values, and returns
 * an array of selected objects, in the form of
 * $base_key_value => $row_index.
 * No need to include the full $row because that's
 * what _views_bulk_operations_adjust_selection() does.
 */
function _views_bulk_operations_get_selection($vbo, $form_state) {
  $field_name = $vbo->options['id'];
  $selection = array_filter($form_state['values'][$field_name]);
  // At this point, $selection is an array of $row_number => $base_key_value
  // We need the $base_key_value to be the key, so the array gets flipped.
  return array_flip($selection);
}

/**
 * Implements hook_views_form_validate().
 *
 * Validate all steps of the VBO multistep form.
 */
function views_bulk_operations_views_form_validate($form, &$form_state) {
  $vbo = _views_bulk_operations_get_field($form['view']['#value']);
  // This is not a VBO-enabled views form.
  if (!$vbo) {
    return;
  }

  switch ($form_state['step']) {
    case 'views_form_views_form':
      $field_name = $vbo->options['id'];
      $selection = _views_bulk_operations_get_selection($vbo, $form_state);
      if (!$selection) {
        form_set_error($field_name, t('No row selected. Please select one or more rows.'));
      }

      $_SESSION['vbo_values'][$_GET['q']] = array(
        'operation' => $form_state['values']['operation'],
        'objects' => array(
          'selection' => $selection,
          'select_all' => $form_state['values']['select_all'],
        ),
      );

      if ($form_state['values']['single_operation']) {
        $operation = $vbo->get_operation_info($form_state['values']['operation']);
        if ($operation['configurable']) {
          _views_bulk_operations_action_validate($operation, $form, $form_state);
        }
      }
      else {
        if (!empty($form_state['clicked_button']['#hash'])) {
          $form_state['values']['operation'] = $form_state['clicked_button']['#hash'];
        }
        if (!$form_state['values']['operation']) { // No action selected
          form_set_error('operation', t('No operation selected. Please select an operation to perform.'));
        }
      }
      break;

    case 'views_bulk_operations_config_form':
      $operation = $vbo->get_operation_info($form_state['views_bulk_operations']['views_form_views_form']['operation']);
      _views_bulk_operations_action_validate($operation, $form, $form_state);
      break;
  }
}

/**
 * Helper function to adjust the selected set of nodes based on different situations.
 */
function _views_bulk_operations_adjust_selection(&$selection, $select_all, $vbo) {
  if ($select_all) {
    // Adjust selection to select all objects across pages.
    $view = views_get_view($vbo->view->name);
    $view->set_exposed_input($vbo->view->get_exposed_input());
    $view->set_arguments($vbo->view->args);
    $view->build($vbo->view->current_display);
    $view->query->set_limit(NULL); // reset the work done by the pager
    $view->query->set_offset(NULL);

    $view->execute($vbo->view->current_display);
    $results = array();
    foreach ($view->result as $result) {
      $results[$result->{$view->base_field}] = $result;
    }
    $selection = $results;
  }
  else {
    // Adjust selection to filter out previous selections.
    $results = array();
    foreach ($vbo->view->result as $result) {
      if (isset($selection[$result->{$vbo->view->base_field}])) {
        $results[$result->{$vbo->view->base_field}] = $result;
      }
    }
    $selection = $results;
  }

  // Adjust sticky selection accordingly.
  $_SESSION['vbo_values'][$_GET['q']]['objects'] = array('selection' => $selection, 'select_all' => $select_all);
}

/**
 * Implements hook_views_form_validate().
 *
 * Submit handler for all steps of the VBO multistep form.
 */
function views_bulk_operations_views_form_submit($form, &$form_state) {
  $vbo = _views_bulk_operations_get_field($form['view']['#value']);
  // This is not a VBO-enabled views form.
  if (!$vbo) {
    return;
  }

  switch ($form_state['step']) {
    case 'views_form_views_form':
      $form_state['views_bulk_operations']['views_form_views_form'] = $form_state['values'];
      $form_state['views_bulk_operations']['views_form_views_form']['selection'] = _views_bulk_operations_get_selection($vbo, $form_state);
      _views_bulk_operations_adjust_selection(
        $form_state['views_bulk_operations']['views_form_views_form']['selection'],
        $form_state['views_bulk_operations']['views_form_views_form']['select_all'],
        $vbo
      );

      $operation = $vbo->get_operation_info($form_state['values']['operation']);
      if ($form_state['values']['single_operation']) {
        if ($operation['configurable']) {
          $form_state['views_bulk_operations']['operation_arguments'] = _views_bulk_operations_action_submit($operation, $form, $form_state);
        }
        if ($vbo->options['vbo']['skip_confirmation']) {
          break; // Go directly to execution
        }
        $form_state['step'] = 'views_bulk_operations_confirm_form';
      }
      else {
        if (!$operation['configurable'] && $vbo->options['vbo']['skip_confirmation']) {
          break; // Go directly to execution
        }
        $form_state['step'] = $operation['configurable'] ? 'views_bulk_operations_config_form' : 'views_bulk_operations_confirm_form';
      }

      $form_state['rebuild'] = TRUE;
      return;

    case 'views_bulk_operations_config_form':
      $form_state['step'] = 'views_bulk_operations_confirm_form';
      $form_state['views_bulk_operations']['views_bulk_operations_config_form'] = $form_state['values'];
      $operation = $vbo->get_operation_info($form_state['views_bulk_operations']['views_form_views_form']['operation']);
      $form_state['views_bulk_operations']['operation_arguments'] = _views_bulk_operations_action_submit($operation, $form, $form_state);
      if ($vbo->options['vbo']['skip_confirmation']) {
        break; // Go directly to execution
      }
      $form_state['rebuild'] = TRUE;
      return;

    case 'views_bulk_operations_confirm_form':
      break;
  }

  // Clean up unneeded SESSION variables.
  unset($_SESSION['vbo_values'][$_GET['q']]);

  // Execute the VBO.
  $operation = $vbo->get_operation_info($form_state['views_bulk_operations']['views_form_views_form']['operation']);
  $operation_arguments = array();
  if ($operation['configurable']) {
    $form_state['values'] += $form_state['views_bulk_operations']['views_bulk_operations_config_form'];
    $operation_arguments = $form_state['views_bulk_operations']['operation_arguments'];
  }
  _views_bulk_operations_execute(
    $vbo->view,
    $form_state['views_bulk_operations']['views_form_views_form']['selection'],
    $operation,
    $operation_arguments,
    array('execution_type' => $vbo->options['vbo']['execution_type'], 'display_result' => $vbo->options['vbo']['display_result'])
  );

  // Clean up the form.
  unset($form_state['step']);
  unset($form_state['views_bulk_operations']);

  $exposed_input = $vbo->view->get_exposed_input();
  $form_state['redirect'] = array('path' => $_GET['q'], array('query' => $exposed_input));
}

/**
 * Helper function to execute the chosen action upon selected objects.
 */
function _views_bulk_operations_execute($view, $objects, $operation, $operation_arguments, $options) {
  // Add action arguments.
  $params = array();
  if ($operation['configurable'] && is_array($operation_arguments)) {
    $params += $operation_arguments;
  }
  // Add static callback arguments. Note that in the case of actions, static arguments
  // are picked up from the database in actions_do().
  if (isset($operation['callback arguments'])) {
    $params += $operation['callback arguments'];
  }
  // Add this view as parameter.
  $params['view'] = $view;

  if ($operation['aggregate'] != VBO_AGGREGATE_FORCED && $options['execution_type'] == VBO_EXECUTION_BATCH) {
    $operations = array();
    foreach ($objects as $oid => $row) {
      $operations[] = array('_views_bulk_operations_batch_process', array($oid, $row));
    }

    // Save the options in the session because Batch API doesn't give a way to
    // send a parameter to the finished callback.
    $_SESSION['vbo_options']['display_result'] = $options['display_result'];
    $_SESSION['vbo_options']['operation'] = $operation;
    $_SESSION['vbo_options']['params'] = serialize($params);

    $batch = array(
      'operations' => $operations,
      'finished' => '_views_bulk_operations_batch_finished',
      'title' => t('Performing %action on selected rows...', array('%action' => $operation['label'])),
    );
    batch_set($batch);
  }
  elseif ($operation['aggregate'] != VBO_AGGREGATE_FORCED && module_exists('job_queue') && $options['execution_type'] == VBO_EXECUTION_QUEUE) {
    global $user;
    unset($params['view']);
    foreach ($objects as $oid => $row) {
      job_queue_add('_views_bulk_operations_queue_process',
        t('Perform %action on @type %oid.', array(
          '%action' => $operation['label'],
          '@type' => t($operation['type']),
          '%oid' => $oid
        )),
        array($oid, $row, $operation, $params, $user->uid, $options['display_result'])
      );
    }
    if ($options['display_result']) {
      drupal_set_message(t('Enqueued %action on @types %oid. Check the <a href="@queue">queued jobs page</a>.', array(
        '%action' => $operation['label'],
        '@types' => format_plural(count($objects), t($operation['type']), t($operation['type'] .'s')),
        '%oid' => implode(', ', array_keys($objects)),
        '@queue' => url('admin/reports/job_queue')
      )));
    }
  }
  else /*if ($options['execution_type'] == VBO_EXECUTION_DIRECT)*/ {
    @set_time_limit(0);

    $context['results']['rows'] = 0;
    $context['results']['time'] = microtime(TRUE);

    _views_bulk_operations_direct_process($operation, $objects, $params, $context);
    _views_bulk_operations_direct_finished(TRUE, $context['results'], array(), $options['display_result']);
  }
}

/**
 * Helper function to handle Job queue operations.
 */
function _views_bulk_operations_queue_process($oid, $row, $operation, $params, $uid, $display_result) {
  views_include('view'); // Force include of view.inc before we unserialize the parameters to make sure view object can be restored.
  module_load_include('inc', 'node', 'node.admin');

  $object_info = _views_bulk_operations_object_info_for_type($operation['type']);
  if (!$object_info) return;
  $object = call_user_func($object_info['load'], $oid);
  $account = user_load(array('uid' => $uid));
  if (!_views_bulk_operations_object_permission($operation, $object, $account)) {
    watchdog('views bulk operations', 'Skipped %action on @type %title due to insufficient permissions.', array(
      '%action' => $operation['label'],
      '@type' => t($operation['type']),
      '%title' => $object->{$object_info['title']},
    ), WATCHDOG_ALERT);
    return;
  }

  _views_bulk_operations_action_do($operation, $oid, $object, $row, $params, $account);

  if ($display_result) {
    watchdog('views bulk operations', 'Performed %action on @type %title.', array(
      '%action' => $operation['label'],
      '@type' => t($operation['type']),
      '%title' => $object->{$object_info['title']},
    ), WATCHDOG_INFO);
  }
}

/**
 * Helper function to handle Batch API operations.
 */
function _views_bulk_operations_batch_process($oid, $row, &$context) {
  views_include('view'); // Force include of view.inc before we unserialize the parameters to make sure view object can be restored.
  module_load_include('inc', 'node', 'node.admin');

  $operation = $_SESSION['vbo_options']['operation'];
  $params = unserialize($_SESSION['vbo_options']['params']);

  if (!isset($context['results']['time'])) {
    $context['results']['time'] = microtime(TRUE);
  }

  $object_info = _views_bulk_operations_object_info_for_type($operation['type']);
  if (!$object_info) return;
  $object = call_user_func($object_info['load'], $oid);
  if (!_views_bulk_operations_object_permission($operation, $object)) {
    $context['results']['log'][] = t('Skipped %action on @type %title due to insufficient permissions.', array(
      '%action' => $operation['label'],
      '@type' => t($operation['type']),
      '%title' => $object->{$object_info['title']},
    ));
    return;
  }

  _views_bulk_operations_action_do($operation, $oid, $object, $row, $params);

  $context['results']['log'][] = t('Performed %action on @type %title.', array(
    '%action' => $operation['label'],
    '@type' => t($operation['type']),
    '%title' => $object->{$object_info['title']},
  ));
  if (isset($context['results']['rows'])) {
    $context['results']['rows'] += 1;
  }
  else {
    $context['results']['rows'] = 1;
  }
}

/**
 * Helper function to cleanup Batch API operations.
 */
function _views_bulk_operations_batch_finished($success, $results, $operations, $display_result = NULL) {
  if ($success) {
    if ($results['rows'] > 0) {
      $message = t('!results rows processed in about !time ms:', array('!results' => $results['rows'], '!time' => round((microtime(TRUE) - $results['time']) * 1000)));
    }
    else {
      $message = t('No rows were processed:');
    }
    $message .= "\n". theme('item_list', array('items' => $results['log']));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = t('An error occurred while processing @operation with arguments: @arguments',
      array('@operation' => $error_operation[0], '@arguments' => print_r($error_operation[0], TRUE)));
  }
  if ($display_result || @$_SESSION['vbo_options']['display_result']) {
    _views_bulk_operations_log($message);
  }
  unset($_SESSION['vbo_options']); // unset the options which were used for just one invocation
}

/**
 * Helper function for direct execution operations.
 */
function _views_bulk_operations_direct_process($operation, $objects, $params, &$context) {
  $object_info = _views_bulk_operations_object_info_for_type($operation['type']);
  if (!$object_info) return;

  if ($operation['aggregate'] != VBO_AGGREGATE_FORBIDDEN) {
    if (isset($object_info['access'])) {
      foreach ($objects as $oid => $row) {
        $object = call_user_func($object_info['load'], $oid);
        if (!_views_bulk_operations_object_permission($operation, $object)) {
          unset($objects[$oid]);
          $context['results']['log'][] = t('Skipped %action on @type %title due to insufficient permissions.', array(
            '%action' => $operation['label'],
            '@type' => t($operation['type']),
            '%title' => $object->{$object_info['title']},
          ));
        }
      }
    }

    if (!empty($objects)) {
      _views_bulk_operations_action_aggregate_do($operation, $objects, $params);

      $context['results']['log'][] = t('Performed aggregate %action on @types %oids.', array(
        '%action' => $operation['label'],
        '@types' => format_plural(count($objects), t($operation['type']), t($operation['type']  .'s')),
        '%oids' => implode(',', array_keys($objects)),
      ));
      $context['results']['rows'] += count($objects);
    }
  }
  else foreach ($objects as $oid => $row) {
    $object = call_user_func($object_info['load'], $oid);
    if (!_views_bulk_operations_object_permission($operation, $object)) {
      $context['results']['log'][] = t('Skipped %action on @type %title due to insufficient permissions.', array(
        '%action' => $operation['label'],
        '@type' => t($operation['type']),
        '%title' => $object->{$object_info['title']},
      ));
      continue;
    }

    _views_bulk_operations_action_do($operation, $oid, $object, $row, $params);

    $context['results']['log'][] = t('Performed %action on @type %title.', array(
      '%action' => $operation['label'],
      '@type' => t($operation['type']),
      '%title' => $object->{$object_info['title']},
    ));
    $context['results']['rows'] += 1;
  }
}

/**
 * Helper function to cleanup direct execution operations.
 */
function _views_bulk_operations_direct_finished($success, $results, $operations, $display_result) {
  _views_bulk_operations_batch_finished($success, $results, $operations, $display_result);
}

/**
 * Helper function to execute one operation.
 */
function _views_bulk_operations_action_do($operation, $oid, $object, $row, $params, $account = NULL) {
  _views_bulk_operations_action_permission($operation, $account);

  $params[$operation['type']] = $object; // Add the object to the context for token support
  $params['row'] = $row; // Expose the original view row to the action

  if ($operation['source'] == 'action') {
    actions_do($operation['callback'], $object, $params);
    if ($operation['type'] == 'node' && ($operation['access op'] & VBO_ACCESS_OP_UPDATE)) { // Save nodes explicitly if needed
      $node_options = variable_get('node_options_'. $object->type, array('status', 'promote'));
      $object->revision = in_array('revision', $node_options);
      node_save($object);
    }
  }
  else { // source == 'operation'
    $args = array_merge(array(array($oid)), $params);
    call_user_func_array($operation['callback'], $args);
  }
}

/**
 * Helper function to execute an aggregate operation.
 */
function _views_bulk_operations_action_aggregate_do($operation, $objects, $params) {
  _views_bulk_operations_action_permission($operation);

  $params[$operation['type']] = $objects;
  if ($operation['source'] == 'action') {
    actions_do($operation['callback'], array_keys($objects), $params);
  }
  else {
    $args = array_merge(array(array_keys($objects)), $params);
    call_user_func_array($operation['callback'], $args);
  }
}

/**
 * Helper function to verify access permission to execute operation.
 */
function _views_bulk_operations_action_permission($operation, $account = NULL) {
  if (module_exists('actions_permissions')) {
    $perm = actions_permissions_get_perm($operation['label'], $operation['callback']);
    if (!user_access($perm, $account)) {
      global $user;
      watchdog('actions permissions', 'An attempt by user %user to !perm was blocked due to insufficient permissions.',
        array('!perm' => $perm, '%user' => isset($account) ? $account->name : $user->name), WATCHDOG_ALERT);
      drupal_access_denied();
      drupal_exit();
    }
  }

  // Check against additional permissions.
  if (!empty($operation['permissions'])) foreach ($operation['permissions'] as $perm) {
    if (!user_access($perm, $account)) {
      global $user;
      watchdog('actions permissions', 'An attempt by user %user to !perm was blocked due to insufficient permissions.',
        array('!perm' => $perm, '%user' => isset($account) ? $account->name : $user->name), WATCHDOG_ALERT);
      drupal_access_denied();
      drupal_exit();
    }
  }
}

/**
 * Helper function to verify access permission to operate on object.
 */
function _views_bulk_operations_object_permission($operation, $object, $account = NULL) {
  // Check against object access permissions.
  $object_info = _views_bulk_operations_object_info_for_type($operation['type']);
  if (!isset($object_info['access'])) return TRUE;

  $access_ops = array(
    VBO_ACCESS_OP_VIEW => 'view',
    VBO_ACCESS_OP_UPDATE => 'update',
    VBO_ACCESS_OP_CREATE => 'create',
    VBO_ACCESS_OP_DELETE => 'delete',
  );
  foreach ($access_ops as $bit => $op) {
    if ($operation['access op'] & $bit) {
      if (!call_user_func($object_info['access'], $op, $object, $account)) {
        return FALSE;
      }
    }
  }

  return TRUE;
}

/**
 * Helper function to let the configurable action provide its configuration form.
 */
function _views_bulk_operations_action_form($action, $view, $selection, $settings) {
  $action_form = $action['callback'].'_form';
  return call_user_func($action_form, array('view' => $view, 'selection' => $selection, 'settings' => $settings));
}

/**
 * Helper function to let the configurable action validate the form if it provides a validator.
 */
function _views_bulk_operations_action_validate($action, $form, $form_values) {
  $action_validate = $action['callback'].'_validate';
  if (function_exists($action_validate)) {
    call_user_func($action_validate, $form, $form_values);
  }
}

/**
 * Helper function to let the configurable action process the configuration form.
 */
function _views_bulk_operations_action_submit($action, $form, $form_values) {
  $action_submit = $action['callback'].'_submit';
  return call_user_func($action_submit, $form, $form_values);
}

/**
 * Theme function to show the confirmation page before executing the action.
 */
function theme_views_bulk_operations_confirmation($variables) {
  $objects = $variables['objects'];
  $view = $variables['view'];
  $object_info = _views_bulk_operations_object_info_for_view($view);
  $items = array();
  foreach ($objects as $oid => $row) {
    if (isset($view->pager_original) && count($items) >= $view->pager_original->get_items_per_page()) {
      $items[] = t('...and <strong>!count</strong> more.', array('!count' => count($objects) - count($items)));
      break;
    }
    if ($object = call_user_func($object_info['load'], $oid)) {
      $items[] = check_plain((string)$object->{$object_info['title']});
    }
  }
  $output = theme('item_list', array('items' => $items, 'title' => t('You selected the following <strong>!count</strong> rows:', array('!count' => count($objects)))));
  return $output;
}

/**
 * Implementation of hook_views_bulk_operations_object_info()
 *
 * Hook used by VBO to be able to handle different objects as does Views 2.
 *
 * The array returned for each object type contains:
 *  'type' => the object type name, should be the same as 'type' field in actions.
 *  'base_table' => the Views 2 table name corresponding to that object type, should be the same as the $view->base_table attribute.
 *  'load' => a function($id) that returns the corresponding object.
 *  'title' => an attribute on the object that returns a human-friendly identifier of the object.
 *  'access' (optional) => a function($op, $node, $account = NULL) that behaves like node_access().
 *
 */
function views_bulk_operations_views_bulk_operations_object_info() {
  return array(
    'node' => array(
      'type' => 'node',
      'base_table' => 'node',
      'load' => '_views_bulk_operations_node_load',
      'title' => 'title',
      'access' => 'node_access',
    ),
    'user' => array(
      'type' => 'user',
      'base_table' => 'users',
      'load' => 'user_load',
      'title' => 'name',
    ),
    'comment' => array(
      'type' => 'comment',
      'base_table' => 'comments',
      'load' => '_comment_load',
      'title' => 'subject',
    ),
    'term' => array(
      'type' => 'term',
      'base_table' => 'term_data',
      'load' => 'taxonomy_get_term',
      'title' => 'name',
    ),
  );
}

/**
 * Load function for objects of type 'node'.
 */
function _views_bulk_operations_node_load($nid) {
  return node_load($nid, NULL, TRUE);
}

/**
 * Helper function to return all object info.
 */
function _views_bulk_operations_get_object_info($reset = FALSE) {
  static $object_info = array();
  if ($reset || empty($object_info)) {
    $object_info = module_invoke_all('views_bulk_operations_object_info');
  }
  return $object_info;
}

/**
 * Helper function to return object info for a given view.
 */
function _views_bulk_operations_object_info_for_view($view) {
  foreach (_views_bulk_operations_get_object_info() as $object_info) {
    if ($object_info['base_table'] == $view->base_table) {
      return $object_info;
    }
  }
  watchdog('views bulk operations', 'Could not find object info for view table @table.', array('@table' => $view->base_table), WATCHDOG_ERROR);
  return NULL;
}

/**
 * Helper function to return object info for a given type ('node', 'user', etc.)
 */
function _views_bulk_operations_object_info_for_type($type) {
  $object_info = _views_bulk_operations_get_object_info();
  if (!isset($object_info[$type])) {
    watchdog('views bulk operations', 'Could not find object info for type @type.', array('@type' => $type), WATCHDOG_ERROR);
    return NULL;
  }
  return $object_info[$type];
}

/**
 * Implementation of hook_action_info().
 */
function views_bulk_operations_action_info() {
  $actions = array();
  $files = file_scan_directory(drupal_get_path('module', 'views_bulk_operations'), '/\.action\.inc$/');
  if ($files) foreach ($files as $file) {
    require_once($file->filename);
    $action_info_fn = 'views_bulk_operations_'. str_replace('.', '_', basename($file->filename, '.inc')).'_info';
    $action_info = call_user_func($action_info_fn);
    if (is_array($action_info)) $actions += $action_info;
  }

  // Add VBO's own programmatic action.
  $actions['views_bulk_operations_action'] = array(
    'label' => t('Execute a VBO programmatically'),
    'type' => 'system',
    'configurable' => TRUE,
    'behavior' => array('changes node property'),
  );

  return $actions;
}

/**
 * Form function for views_bulk_operations_action action.
 * @todo Convert this code to the new way of doing things.
 */
function views_bulk_operations_action_form($context) {
  // Some views choke on being rebuilt at this moment because of validation errors in the action form.
  // So we save the error state, reset it, build the views, then reinstate the errors.
  // Also unset the error messages because they'll be displayed again after the loop.
  $errors = form_get_errors();
  if (!empty($errors)) foreach ($errors as $message) {
    unset($_SESSION['messages']['error'][array_search($message, $_SESSION['messages']['error'])]);
  }
  form_set_error(NULL, '', TRUE);

  // Look for all views with VBO styles, and for each find the operations they use.
  $views[0] = t('- Choose a view -');
  $operations[0] = t('- Choose an operation -');
  foreach (views_get_all_views() as $name => $view) {
    foreach (array_keys($view->display) as $display) {
      $display_options = &$view->display[$display]->display_options;
      if (isset($display_options['style_plugin']) && $display_options['style_plugin'] == 'bulk') {
        $vid = empty($view->vid) ? $view->name : $view->vid;
        $view->build($display);
        $views[$vid] = $view->name . (!empty($view->description) ? ': ' . $view->description : '');
        foreach (array_filter($display_options['style_options']['selected_operations']) as $operation) {
          $views_operations[$vid][$operation] = $view->style_plugin->options['all_operations'][$operation]['label'];
          $operations[$operation] = $view->style_plugin->options['all_operations'][$operation]['label'];
        }
      }
    }
  }

  if (!empty($errors)) foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }

  drupal_add_js(array('vbo' => array('action' => array('views_operations' => $views_operations))), 'setting');
  drupal_add_js(drupal_get_path('module', 'views_bulk_operations') .'/views_bulk_operations.action.js');

  $form['view_vid'] = array(
    '#type' => 'select',
    '#title' => t('View'),
    '#description' => t('Select the VBO to be executed.'),
    '#options' => $views,
    '#default_value' => @$context['view_vid'],
    '#attributes' => array('onchange' => 'Drupal.vbo.action.updateOperations(this.options[this.selectedIndex].value);'),
  );
  $form['operation_callback'] = array(
    '#type' => 'select',
    '#title' => t('Operation'),
    '#description' => t('Select the operation to be executed.'),
    '#options' => $operations,
    '#default_value' => @$context['operation_callback'],
  );
  $form['operation_arguments'] = array(
    '#type' => 'textarea',
    '#title' => t('Operation arguments'),
    '#description' => t('Enter PHP script that will assemble the operation arguments (in the case of configurable actions).
                         These arguments should be of the form: <code>return array(\'argument1\' => \'value1\', ...);</code>
                         and they should correspond to the values returned by the action\'s form submit function.
                         The variables <code>&$object</code> and <code>$context</code> are available to this script.
                        '),
    '#default_value' => @$context['operation_arguments'],
  );
  $form['view_exposed_input'] = array(
    '#type' => 'textarea',
    '#title' => t('View exposed input'),
    '#description' => t('Enter PHP script that will assemble the view exposed input (if the view accepts exposed input).
                         These input should be of the form: <code>return array(\'input1\' => \'value1\', ...);</code>
                         and they should correspond to the query values used on the view URL when exposed filters are applied.
                         The variables <code>&$object</code> and <code>$context</code> are available to this script.
                        '),
    '#default_value' => @$context['view_exposed_input'],
  );
  $form['view_arguments'] = array(
    '#type' => 'textarea',
    '#title' => t('View arguments'),
    '#description' => t('Enter PHP script that will assemble the view arguments (if the view accepts arguments).
                         These input should be of the form: <code>return array(\'value1\', ...);</code>
                         and they should correspond to the arguments defined in the view.
                         The variables <code>&$object</code> and <code>$context</code> are available to this script.
                        '),
    '#default_value' => @$context['view_arguments'],
  );
  return $form;
}

/**
 * Form validate function for views_bulk_operations_action action.
 */
function views_bulk_operations_action_validate($form, $form_state) {
  if (empty($form_state['values']['view_vid'])) {
    form_set_error('view_vid', t('You must choose a view to be executed.'));
  }
  if (empty($form_state['values']['operation_callback'])) {
    form_set_error('operation_callback', t('You must choose an operation to be executed.'));
  }
}

/**
 * Form submit function for views_bulk_operations_action action.
 */
function views_bulk_operations_action_submit($form, $form_state) {
  return array(
    'view_vid' => $form_state['values']['view_vid'],
    'operation_callback' => $form_state['values']['operation_callback'],
    'operation_arguments' => $form_state['values']['operation_arguments'],
    'view_exposed_input' => $form_state['values']['view_exposed_input'],
    'view_arguments' => $form_state['values']['view_arguments'],
  );
}

/**
 * Execution function for views_bulk_operations_action action.
 */
function views_bulk_operations_action(&$object, $context) {
  $operation_arguments = array();
  if (!empty($context['operation_arguments'])) {
    $operation_arguments = eval($context['operation_arguments']);
  }
  $view_exposed_input = array();
  if (!empty($context['view_exposed_input'])) {
    $view_exposed_input = eval($context['view_exposed_input']);
  }
  $view_arguments = array();
  if (!empty($context['view_arguments'])) {
    $view_arguments = eval($context['view_arguments']);
  }
  views_bulk_operations_execute($context['view_vid'], $context['operation_callback'], $operation_arguments, $view_exposed_input, $view_arguments);
}

/**
 * API function to programmatically invoke a VBO.
 * @todo Convert this code to the new way of doing things.
 */
function views_bulk_operations_execute($vid, $operation_callback, $operation_arguments = array(), $view_exposed_input = array(), $view_arguments = array()) {
  $view = views_get_view($vid);
  if (!is_object($view)) {
    _views_bulk_operations_report_error('Could not find view %vid.', array('%vid' => $vid));
    return;
  }

  // Find the view display that has the VBO style.
  $found = FALSE;
  foreach (array_keys($view->display) as $display) {
    $display_options = &$view->display[$display]->display_options;
    if (isset($display_options['style_plugin']) && $display_options['style_plugin'] == 'bulk') {
      $view->set_display($display);
      $found = TRUE;
      break;
    }
  }
  if (!$found) {
    _views_bulk_operations_report_error('Could not find a VBO display in view %vid.', array('%vid' => $vid));
    return;
  }

  // Execute the view.
  $view->set_exposed_input($view_exposed_input);
  $view->set_arguments($view_arguments);
  $view->build($plugin->view->current_display);
  $view->query->set_limit(NULL); // reset the work done by the pager
  $view->query->set_offset(NULL);
  $view->execute();

  // Find the selected operation.
  $plugin = $view->style_plugin;
  $operations = $plugin->get_selected_operations();
  if (!isset($operations[$operation_callback])) {
    _views_bulk_operations_report_error('Could not find operation %operation in view %vid.', array('%operation' => $operation_callback, '%vid' => $vid));
    return;
  }
  $operation = $plugin->get_operation_info($operation_callback);
  foreach ($view->result as $result) {
    $objects[$result->{$view->base_field}] = $result->{$view->base_field};
  }

  // Execute the operation on the view results.
  $execution_type = $plugin->options['execution_type'];
  if ($execution_type == VBO_EXECUTION_BATCH) {
    $execution_type = VBO_EXECUTION_DIRECT; // we don't yet support Batch API here
  }
  $display_result = $plugin->options['display_result'];
  _views_bulk_operations_execute(
    $view,
    $objects,
    $operation,
    $operation_arguments,
    array('execution_type' => $execution_type, 'display_result' => $display_result)
  );
}

/**
 * Helper function to report an error.
 */
function _views_bulk_operations_report_error($msg, $arg) {
  watchdog('views bulk operations', $msg, $arg, WATCHDOG_ERROR);
  if (function_exists('drush_set_error')) {
    drush_set_error('VIEWS_BULK_OPERATIONS_EXECUTION_ERROR', strip_tags(dt($msg, $arg)));
  }
}

/**
 * Helper function to log an information.
 */
function _views_bulk_operations_log($msg) {
  if (function_exists('drush_log')) {
    drush_log(strip_tags($msg), 'ok');
  }
  else {
    drupal_set_message($msg);
  }
}

/**
 * API function to add actions to a VBO.
 * @todo Convert this function, or kill it? Don't see it used anywhere.
 */
function views_bulk_operations_add_actions($vid, $actions) {
  $view = views_get_view($vid);
  if (!is_object($view)) {
    _views_bulk_operations_report_error('Could not find view %vid.', array('%vid' => $vid));
    return;
  }

  // Find the view display that has the VBO style.
  $found = FALSE;
  foreach (array_keys($view->display) as $display) {
    $display_options = &$view->display[$display]->display_options;
    if (isset($display_options['style_plugin']) && $display_options['style_plugin'] == 'bulk') {
      $found = TRUE;
      break;
    }
  }
  if (!$found) {
    _views_bulk_operations_report_error('Could not find a VBO display in view %vid.', array('%vid' => $vid));
    return;
  }

  // Iterate on the desired actions.
  $selected_operations = $display_options['style_options']['selected_operations'];
  $ignored = array();
  if (!empty($actions)) foreach ($actions as $action) {
    $modified = FALSE;
    if (is_numeric($action)) { // aid
      $action_object = db_query("SELECT * FROM {actions} WHERE aid = :aid", array(':aid' => $action))->fetchObject();
      if (is_object($action_object)) {
        $parameters = unserialize($action_object->parameters);
        $key = $action_object->callback . (empty($parameters) ? '' : ':'. md5($action_object->parameters));
        if (isset($selected_operations[$key])) { // available for this view
          $display_options['style_options']['selected_operations'][$key] = $key;
          $modified = TRUE;
        }
      }
    }
    else { // callback or title
      if (isset($selected_operations[$action])) { // callback and available for this view
        $display_options['style_options']['selected_operations'][$action] = $action;
        $modified = TRUE;
      }
      else { // try the title
        $action_object = db_query("SELECT * FROM {actions} WHERE UPPER(label) = :label", array(':label' => drupal_strtoupper($action)))->fetchObject();
        if (is_object($action_object)) {
          $parameters = unserialize($action_object->parameters);
          $key = $action_object->callback . (empty($parameters) ? '' : ':'. md5($action_object->parameters));
          if (isset($selected_operations[$key])) { // available for this view
            $display_options['style_options']['selected_operations'][$key] = $key;
            $modified = TRUE;
          }
        }
      }
    }
    if (!$modified) {
      $ignored[] = $action;
    }
  }

  // Save the view if anything was changed.
  if (count($actions) > count($ignored)) {
    $view->save();
    views_object_cache_clear('view', $vid);

    $msg = t('View %vid was successfully modified.', array('%vid' => $vid));
    if (!empty($ignored)) {
      $msg .= ' ' . t('The following actions were ignored: %ignored.', array('%ignored' => implode(', ', $ignored)));
    }
  }
  else {
    $msg = t('View %vid was not modified, because all actions were ignored.', array('%vid' => $vid));
  }
  _views_bulk_operations_log($msg);
}
