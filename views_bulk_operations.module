<?php
// $Id$

define('VIEWS_BULK_OPS_STEP_VIEW', 1);
define('VIEWS_BULK_OPS_STEP_CONFIG', 2);
define('VIEWS_BULK_OPS_STEP_CONFIRM', 3);
define('VIEWS_BULK_OPS_STEP_SINGLE', 4);

// maximum number of node titles that will be displayed in operation
// confirmation page.
define('VIEWS_BULK_OPS_MAX_CONFIRM_NODES', 10);

include_once(drupal_get_path('module', 'views_bulk_operations') .'/taxonomy_actions.inc');

function views_bulk_operations_elements() {
  $type['views_node_selector'] = array(
    '#input' => TRUE,
    '#view' => NULL,
    '#process' => array('views_node_selector_process'),
  );
  return $type;
}

function views_bulk_operations_theme() {
  return array(
    'views_node_selector' => array(
      'arguments' => array('element' => NULL),
    ),
    'views_bulk_operations_confirmation' => array(
      'arguments' => array('nodes' => NULL),
    ),
  );
}

function theme_views_node_selector($element) {
  $view = $element['#view'];
  $sets = $element['#sets'];

  $vars = array(
    'view' => $view,
    );

  $output = '';
  // Give each group its own headers row.
  foreach ($sets as $records) {
    // template_preprocess_views_view_table expects the raw data in 'rows'.
    $vars['rows'] = $records;
      
    // Render the view as table. Function from views/theme/theme.inc
    template_preprocess_views_view_table($vars);
    
    // Add checkboxes to the header and the rows.
    $checkbox_header = array(theme('table_select_header_cell'));
    $headers = array_merge($checkbox_header, $vars['header']);
    
    $rows = array();
    foreach ($records as $num => $node) {
      $row = array();
      $row[] =  theme('checkbox', $element[$node->nid]);
      $rows[] = array_merge($row, $vars['rows'][$num]) ;
    }

    $output .= theme('table', $headers, $rows);
  }
  return theme('form_element', $element, $output);
}

function views_node_selector_process($element, $edit) {
  $view = $element['#view'];
  $options = array();
  foreach ($view->result as $node) {
    $options[$node->nid] = '';
  }
  $element['#options'] = $options;
  $element = expand_checkboxes($element);
  return $element; 
}

function views_bulk_operations_form($form_state, $plugin) {
  drupal_add_css(drupal_get_path('module', 'views_bulk_operations') . '/views_bulk_operations.css', 'module');

  if (!isset($form_state['storage']['step'])) {
    if (count($plugin->get_selected_operations()) == 1) {
      $step = VIEWS_BULK_OPS_STEP_SINGLE;
    }
    else {
      $step = VIEWS_BULK_OPS_STEP_VIEW;
    }
  } else switch ($form_state['storage']['step']) {
  case VIEWS_BULK_OPS_STEP_VIEW:
    $operation = $plugin->get_operation_info($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['action']);
    if ($operation['configurable']) {
      $step = VIEWS_BULK_OPS_STEP_CONFIG;
    }
    else {
      $step = VIEWS_BULK_OPS_STEP_CONFIRM;
    }
    break;
  case VIEWS_BULK_OPS_STEP_SINGLE:
  case VIEWS_BULK_OPS_STEP_CONFIG:
    $step = VIEWS_BULK_OPS_STEP_CONFIRM;
  }
  $form['step'] = array('#type' => 'value', '#value' => $step);
  $form['plugin'] = array('#type' => 'value', '#value' => $plugin);
  
  switch ($step) {
  case VIEWS_BULK_OPS_STEP_VIEW:
    $form['select'] = array(
      '#type' => 'fieldset',
      '#title' => t('Bulk operations'),
      '#prefix' => '<div id="views-bulk-operations-select">',
      '#suffix' => '</div>',             
    );
    $form['select']['action'] = array(
      '#type' => 'select',
      '#options' => array(0 => t('- Choose an operation -')) + $plugin->get_selected_operations(),
      '#prefix' => '<div id="views-bulk-operations-dropdown">',
      '#suffix' => '</div>',             
    );
    $form['nodes'] = array(
      '#type' => 'views_node_selector',
      '#view' => $plugin->view,
      // Sets for grouping.
      '#sets' => $plugin->sets,
      '#prefix' => '<div class="views-node-selector">',
      '#suffix' => '</div>',
    );
    $form['select']['submit'] = array(
      '#type' => 'submit',
      '#value' => t('Execute'),
      '#prefix' => '<div id="views-bulk-operations-submit">',
      '#suffix' => '</div>',             
    );
    break;
  
  case VIEWS_BULK_OPS_STEP_SINGLE:
    $ops = array_keys($plugin->get_selected_operations());
    $operation = $plugin->get_operation_info($ops[0]);
    $form['action'] = array('#type' => 'value', '#value' => $ops[0]);
    if ($operation['configurable']) {
      $form['select'] = array(
        '#type' => 'fieldset',
        '#title' => $operation['label'],
        '#prefix' => '<div id="views-bulk-operations-select">',
        '#suffix' => '</div>',
      );
      $form['select'] += _views_bulk_operations_action_form($operation);
    }
    $form['nodes'] = array(
      '#type' => 'views_node_selector',
      '#view' => $plugin->view,
      // Sets for grouping.
      '#sets' => $plugin->sets,
      '#prefix' => '<div class="views-node-selector">',
      '#suffix' => '</div>',
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => $operation['label'],
      '#prefix' => '<div id="views-bulk-operations-submit">',
      '#suffix' => '</div>',             
    );
    break;
  
  case VIEWS_BULK_OPS_STEP_CONFIG:
    $operation = $plugin->get_operation_info($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['action']);
    $form += _views_bulk_operations_action_form($operation);
    $form['execute'] = array(
      '#type' => 'submit',
      '#value' => t('Next'),
    );
    drupal_set_title(t('Set parameters for \'%action\'', array('%action' => $operation['label'])));
    $plugin->view->pager['use_pager'] = FALSE;
    $plugin->view->exposed_widgets = NULL;
    break;
  
  case VIEWS_BULK_OPS_STEP_CONFIRM:
    $operation = $plugin->get_operation_info($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['action']);
    $query = drupal_query_string_encode($_GET, array('q'));
    $form = confirm_form($form,
      t('Are you sure you want to perform \'%action\' on selected nodes?', array('%action' => $operation['label'])),
      $query ? array('path' => $_GET['q'], 'query' => $query) : array('path' => $_GET['q']),
      theme('views_bulk_operations_confirmation', array_filter($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['nodes']))); 
    $plugin->view->pager['use_pager'] = FALSE;
    $plugin->view->exposed_widgets = NULL;
    break;
  }
 
  // Use views_bulk_operations_form_submit() for form submit, regardless of form_id.
  $form['#submit'][] = 'views_bulk_operations_form_submit';
  $form['#validate'][] = 'views_bulk_operations_form_validate';
  return $form;
}

function views_bulk_operations_form_validate($form, &$form_state) {
  switch ($form_state['values']['step']) {
  case VIEWS_BULK_OPS_STEP_VIEW:
    if (!array_sum($form_state['values']['nodes'])) { // If all 0, no node selected
      form_set_error('nodes', t('No nodes selected. Please select one or more nodes.'));
    }
    if (!$form_state['values']['action']) { // No action selected
      form_set_error('action', t('No operation selected. Please select an operation to perform.'));
    }
    break;
  case VIEWS_BULK_OPS_STEP_SINGLE:
    if (!array_sum($form_state['values']['nodes'])) { // If all 0, no node selected
      form_set_error('nodes', t('No nodes selected. Please select one or more nodes.'));
    }
    $plugin = $form_state['values']['plugin'];
    $operation = $plugin->get_operation_info($form_state['values']['action']);
    if ($operation['configurable']) {
      _views_bulk_operations_action_validate($operation, $form, $form_state);
    }
    break; 
  case VIEWS_BULK_OPS_STEP_CONFIG:
    $plugin = $form_state['values']['plugin'];
    $operation = $plugin->get_operation_info($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['action']);
    _views_bulk_operations_action_validate($operation, $form, $form_state);
    break;
  }
}

function views_bulk_operations_form_submit($form, &$form_state) {
  switch ($form_state['values']['step']) {
  case VIEWS_BULK_OPS_STEP_VIEW:
    $form_state['storage']['step'] = $form_state['values']['step'];
    $form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW] = $form_state['values'];
    return;
  case VIEWS_BULK_OPS_STEP_SINGLE:
    $form_state['storage']['step'] = $form_state['values']['step'];
    $form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW] = $form_state['values'];
    $form_state['storage'][VIEWS_BULK_OPS_STEP_CONFIG] = $form_state['values'];
    return;
  case VIEWS_BULK_OPS_STEP_CONFIG:
    $form_state['storage']['step'] = $form_state['values']['step'];
    $form_state['storage'][VIEWS_BULK_OPS_STEP_CONFIG] = $form_state['values'];
    return; 
  case VIEWS_BULK_OPS_STEP_CONFIRM:
    break;
  }

  $plugin = $form_state['values']['plugin'];
  $operation = $plugin->get_operation_info($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['action']);
  $params = array();
  if ($operation['type'] == 'action' && $operation['configurable']) {
    $form_state['values'] += $form_state['storage'][VIEWS_BULK_OPS_STEP_CONFIG];
    $params = _views_bulk_operations_action_submit($operation, $form, $form_state);
  }
  else if ($operation['type'] == 'node' && isset($operation['callback arguments'])) {
    $params = $operation['callback arguments'];
  }
  $nodes = array_filter($form_state['storage'][VIEWS_BULK_OPS_STEP_VIEW]['nodes']);
  
  // FIXME Hack to force actions_do() to process any number of invocations. 
  // Check http://drupal.org/node/148410#comment-946901 to understand more.
  variable_set('actions_max_stack', 10000000);
  if ($plugin->options['use_batch']) {
    $operations = array();
    foreach ($nodes as $nid) {
      $operations[] = array('_views_bulk_operations_batch_process', array($operation, $nid, $params));
    }
    $batch = array(
      'operations' => $operations,
      'finished' => '_views_bulk_operations_batch_finished',
      'title' => t('Performing %action on selected nodes...', array('%action' => $operation['label'])),
      'init_message' => t('starting batch process.'),
      'progress_message' => t('processed @current out of @total.'),
      'error_message' => t('batch process has encountered an error.'),
    );  
    batch_set($batch);
  }
  else {
    $context = array();
    foreach ($nodes as $nid) {
      _views_bulk_operations_batch_process($operation, $nid, $params, $context);
    }
    _views_bulk_operations_batch_finished(TRUE, $context['results'], array());
  }

  unset($form_state['storage']);
  $form_state['redirect'] = $_GET['q'];
}

function _views_bulk_operations_batch_process($operation, $nid, $params, &$context) {
  $node = node_load($nid);
  if ($operation['type'] == 'action') {
    _views_bulk_operations_action_do($operation, $node, $params);
  }
  else { // type == 'node'
    $args = array_merge(array(array($nid)), $params);
    call_user_func_array($operation['callback'], $args);
  }
  $context['results'][] = t('Performed %action on node %title.', array('%action' => $operation['label'], '%title' => $node->title));
}

function _views_bulk_operations_batch_finished($success, $results, $operations) {
  if ($success) {
    // Here we do something meaningful with the results.
    $message = count($results) .' nodes processed:';
    $message .= theme('item_list', $results);
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $message = 'An error occurred while processing '. $error_operation[0] .' with arguments: '. print_r($error_operation[0], TRUE);
  }
  variable_set('actions_max_stack', 35);
  drupal_set_message($message);
}

function _views_bulk_operations_action_form($action) {
  $action_form = $action['callback'].'_form';
  return call_user_func($action_form, array());
}

function _views_bulk_operations_action_validate($action, $form, $form_values) {
  $action_validate = $action['callback'].'_validate';
  call_user_func($action_validate, $form, $form_values);
}

function _views_bulk_operations_action_submit($action, $form, $form_values) {
  $action_submit = $action['callback'].'_submit';
  return call_user_func($action_submit, $form, $form_values);
}

function _views_bulk_operations_action_do($action, $node, $context) {
  $action_do = $action['callback'];
  actions_do($action['callback'], $node, $context);
  node_save($node);
}

function theme_views_bulk_operations_confirmation($nodes) {
  $count = 0;
  $output = t('You selected the following nodes:').'<br /><ul>';
  foreach ($nodes as $nid) {
    // Number of titles to display before we say "...and more"
    if ((VIEWS_BULK_OPS_MAX_CONFIRM_NODES > 0) && ($count >=  VIEWS_BULK_OPS_MAX_CONFIRM_NODES)) {
      $output .= '<li>'.t('...and %remaining more.', array('%remaining' => count($nodes) - $count)).'</li>';
      break;
    }
    if (is_numeric($nid) && $nid > 0) {
      $node = node_load($nid);
      $output .= '<li>'.$node->title.'</li>';
      $count++;
    }
  }
  $output .= '</ul>';
  return $output;
}

function views_bulk_operations_node_operations() {
  $operations = array(
    'bulk_delete' => array(
      'label' => t('Delete'),
      'callback' => 'views_bulk_operations_delete_nodes',
    ),
  );
  return $operations;
}

function views_bulk_operations_delete_nodes($nodes) {
  foreach ($nodes as $nid) {
    node_delete($nid);
  }
}

function views_bulk_operations_views_default_views() {
  $view = new view;
  $view->name = 'admin_content';
  $view->description = 'View, edit and delete your site\'s content.';
  $view->tag = '';
  $view->view_php = '';
  $view->base_table = 'node';
  $view->is_cacheable = FALSE;
  $view->api_version = 2;
  $view->disabled = FALSE; /* Edit this to true to make a default view disabled initially */
  $handler = $view->new_display('default', 'Defaults', 'default');
  $handler->override_option('fields', array(
    'title' => array(
      'label' => 'Title',
      'link_to_node' => 1,
      'exclude' => 0,
      'id' => 'title',
      'table' => 'node',
      'field' => 'title',
      'relationship' => 'none',
      'override' => array(
        'button' => 'Override',
      ),
    ),
    'type' => array(
      'label' => 'Type',
      'link_to_node' => 0,
      'exclude' => 0,
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'name' => array(
      'label' => 'Author',
      'link_to_user' => 1,
      'exclude' => 0,
      'id' => 'name',
      'table' => 'users',
      'field' => 'name',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'status' => array(
      'label' => 'Published',
      'type' => 'yes-no',
      'not' => 0,
      'exclude' => 0,
      'id' => 'status',
      'table' => 'node',
      'field' => 'status',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'edit_node' => array(
      'id' => 'edit_node',
      'table' => 'node',
      'field' => 'edit_node',
    ),
  ));
  $handler->override_option('filters', array(
    'type' => array(
      'operator' => 'in',
      'value' => array(),
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'use_operator' => 0,
        'operator' => 'type_op',
        'identifier' => 'type',
        'label' => 'Node: Type',
        'optional' => 1,
        'single' => 1,
        'remember' => 0,
        'reduce' => 0,
      ),
      'id' => 'type',
      'table' => 'node',
      'field' => 'type',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'promote' => array(
      'operator' => '=',
      'value' => '1',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'operator' => '',
        'identifier' => 'promote',
        'label' => 'Promoted to front page',
        'optional' => 1,
        'remember' => 0,
      ),
      'id' => 'promote',
      'table' => 'node',
      'field' => 'promote',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'status' => array(
      'operator' => '=',
      'value' => '1',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'operator' => '',
        'identifier' => 'status',
        'label' => 'Published',
        'optional' => 1,
        'remember' => 0,
      ),
      'id' => 'status',
      'table' => 'node',
      'field' => 'status',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
    'sticky' => array(
      'operator' => '=',
      'value' => '1',
      'group' => '0',
      'exposed' => TRUE,
      'expose' => array(
        'operator' => '',
        'identifier' => 'sticky',
        'label' => 'Sticky',
        'optional' => 1,
        'remember' => 0,
      ),
      'id' => 'sticky',
      'table' => 'node',
      'field' => 'sticky',
      'override' => array(
        'button' => 'Override',
      ),
      'relationship' => 'none',
    ),
  ));
  $handler->override_option('access', array(
    'type' => 'none',
    'role' => array(),
    'perm' => '',
  ));
  $handler->override_option('title', 'Content');
  $handler->override_option('use_pager', '1');
  $handler->override_option('style_plugin', 'bulk');
  $handler->override_option('style_options', array(
    'grouping' => '',
    'override' => 1,
    'sticky' => 0,
    'order' => 'asc',
    'columns' => array(
      'title' => 'title',
      'type' => 'type',
      'name' => 'name',
      'status' => 'status',
      'edit_node' => 'edit_node',
    ),
    'info' => array(
      'title' => array(
        'sortable' => 1,
        'separator' => '',
      ),
      'type' => array(
        'sortable' => 1,
        'separator' => '',
      ),
      'name' => array(
        'sortable' => 1,
        'separator' => '',
      ),
      'status' => array(
        'sortable' => 0,
        'separator' => '',
      ),
      'edit_node' => array(
        'separator' => '',
      ),
    ),
    'default' => '-1',
    'use_batch' => 0,
    'selected_operations' => array(
    ),
  ));
  $handler = $view->new_display('page', 'Page', 'page');
  $handler->override_option('path', 'admin/content/node2');
  $handler->override_option('menu', array(
    'type' => 'none',
    'title' => '',
    'weight' => 0,
  ));
  $handler->override_option('tab_options', array(
    'type' => 'none',
    'title' => '',
    'weight' => 0,
  ));


  $views[$view->name] = $view;
  return $views;
}

/**
 * hook_forms() implementation
 * force each instance of function to use the
 * same callback
 */
function views_bulk_operations_forms() {
  // Get the form ID
  $args = func_get_args();
  $form_id = $args[0];
  // Ensure we map a callback for our form and not something else
  $forms = array();
  if (strpos($form_id, 'views_bulk_operations_form') === 0) {
    // Let the forms API know where to get the form data corresponding
    // to this form id.
    $forms[$form_id] = array('callback' => 'views_bulk_operations_form');
  }
  return $forms;
}

